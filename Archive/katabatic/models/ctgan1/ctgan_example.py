import os
import sys
import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
import seaborn as sns
import logging

# Add the project root to the Python path to allow module imports
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..'))
sys.path.insert(0, project_root)

# Import CtganAdapter and evaluation functions from Katabatic
from katabatic.models.ctgan.ctgan_adapter import CtganAdapter
from katabatic.models.ctgan.ctgan_benchmark import evaluate_ctgan, print_evaluation_results

# Configure logging to display information-level messages with timestamps
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def visualize_data(real_data, synthetic_data, title_prefix):
    """
    Visualize distributions of features in the real and synthetic datasets.
    
    Args:
        real_data (pd.DataFrame): The real dataset.
        synthetic_data (pd.DataFrame): The synthetic dataset generated by CT-GAN.
        title_prefix (str): Prefix for the plot titles.
    """
    n_features = len(real_data.columns)
    n_cols = 2  # Real and Synthetic
    n_rows = n_features
    
    plt.figure(figsize=(12, 4 * n_features))
    
    for i, col in enumerate(real_data.columns):
        plt.subplot(n_rows, n_cols, 2 * i + 1)
        if real_data[col].dtype == 'object' or real_data[col].dtype.name == 'category':
            # Plot categorical feature distributions
            sns.countplot(data=real_data, x=col, palette='Blues')
            plt.title(f"{title_prefix} Real - {col}")
        else:
            # Plot numerical feature distributions
            sns.histplot(real_data[col], kde=True, color='blue', label='Real', stat="density")
            plt.title(f"{title_prefix} Real - {col}")
            plt.legend()
        
        plt.subplot(n_rows, n_cols, 2 * i + 2)
        if synthetic_data[col].dtype == 'object' or synthetic_data[col].dtype.name == 'category':
            # Plot synthetic categorical feature distributions
            sns.countplot(data=synthetic_data, x=col, palette='Reds')
            plt.title(f"{title_prefix} Synthetic - {col}")
        else:
            # Plot synthetic numerical feature distributions
            sns.histplot(synthetic_data[col], kde=True, color='red', label='Synthetic', stat="density")
            plt.title(f"{title_prefix} Synthetic - {col}")
            plt.legend()
    
    plt.tight_layout()
    plt.show()  # Display the plots

def main():
    try:
        logger.info("Starting CT-GAN Iris example script")
        print("Starting CT-GAN Iris example script")  # Confirmation print

        # Load Iris dataset from scikit-learn
        iris = load_iris()
        X = pd.DataFrame(iris.data, columns=iris.feature_names)  # Feature DataFrame
        y = pd.Series(iris.target, name="Category").astype('category')  # Target Series as categorical
        
        # Combine features and target into a single DataFrame
        data = pd.concat([X, y], axis=1)

        logger.info("Iris data loaded successfully")
        print("Iris data loaded successfully")  # Confirmation print

        # Initialize CtganAdapter with configuration parameters
        ctgan_params = {
            "noise_dim": 128,          # Dimension of the noise vector
            "learning_rate": 2e-4,     # Learning rate for the optimizer
            "batch_size": 100,         # Number of samples per training batch
            "discriminator_steps": 2,  # Number of discriminator updates per generator update
            "epochs": 10,              # Total number of training epochs
            "lambda_gp": 10,           # Gradient penalty coefficient for WGAN-GP
            "pac": 10,                 # Number of minibatches for PacGAN (if applicable)
            "cuda": False,             # Disable CUDA for simplicity
            "vgm_components": 2        # Number of components in the Gaussian Mixture Model
        }
        ctgan_model = CtganAdapter(**ctgan_params)  # Initialize CT-GAN model

        logger.info("CT-GAN model initialized with parameters")
        print("CT-GAN model initialized with parameters")  # Confirmation print

        # Fit the CT-GAN model to the Iris data
        ctgan_model.fit(X, y)
        logger.info("CT-GAN model fitted successfully")
        print("CT-GAN model fitted successfully")  # Confirmation print

        # Generate synthetic data matching the size of the original dataset
        synthetic_data = ctgan_model.generate(n=len(data))
        logger.info(f"Generated {len(synthetic_data)} rows of synthetic data")
        print(f"Generated {len(synthetic_data)} rows of synthetic data")  # Confirmation print

        # Ensure synthetic data has the same columns as real data
        synthetic_data = synthetic_data[data.columns]
        synthetic_data['Category'] = synthetic_data['Category'].astype('category')  # Ensure 'Category' is categorical
        logger.info(f"Synthetic data shape: {synthetic_data.shape}")
        logger.info(f"Real data shape: {data.shape}")
        print(f"Synthetic data shape: {synthetic_data.shape}")
        print(f"Real data shape: {data.shape}")  # Confirmation print

        # Visualize real and synthetic data distributions
        visualize_data(data, synthetic_data, "Iris Data")
        logger.info("Data visualization completed")
        print("Data visualization completed")  # Confirmation print

        # Save synthetic data to CSV
        synthetic_data.to_csv("synthetic_iris_data.csv", index=False)
        logger.info("Synthetic Iris data saved to 'synthetic_iris_data.csv'")
        print("Synthetic Iris data saved to 'synthetic_iris_data.csv'")  # Confirmation print

        # Evaluate the quality of the synthetic data
        logger.info("Evaluating synthetic data quality")
        print("Evaluating synthetic data quality")  # Confirmation print

        # Evaluate CT-GAN using the evaluation functions
        evaluation_metrics = evaluate_ctgan(
            real_data=data,
            synthetic_data=synthetic_data
        )
        logger.info("Evaluation Metrics:")
        print_evaluation_results(evaluation_metrics)  # Print evaluation results

        logger.info("CT-GAN Iris example completed successfully")
        print("CT-GAN Iris example completed successfully")  # Confirmation print

    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")  # Log any errors
        print(f"An error occurred: {str(e)}")        # Print any errors

if __name__ == "__main__":
    main()
