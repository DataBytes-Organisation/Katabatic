# The Model Service Provider Interface (SPI) provides an abstract base class (ABC) for all model adapters to implement.

from abc import ABC, abstractmethod

class KatabaticModelSPI(ABC):
    """
    Abstract base class for all model adapters in Katabatic.

    This class defines the Model Service Provider Interface (SPI) which includes methods
    for loading models, loading data, fitting models to data, and generating synthetic data.
    
    Attributes:
        type (str): The type of model, either 'discrete' or 'continuous'.
        constraints (Any): Constraints for the model.
        batch_size (int): The batch size used for training.
        epochs (int): The number of epochs for training.
    """
    @abstractmethod
    def __init__(self, type):
        """
        Initialize the model with the given type.

        Args:
            type (str): The type of model ('discrete' or 'continuous').

        Raises:
            ValueError: If type is not 'discrete' or 'continuous'.
        """
        self.type = None  # Should be either 'discrete' or 'continuous'
        self.constraints = None 
        self.batch_size = None
        self.epochs = None

    @abstractmethod
    def load_model(self): #Load the model
        """
        Load the model.

        This method should be implemented to load a pre-trained model.
        """
        pass

    @abstractmethod
    def load_data(self): #Load data
        """
        Load the data.

        This method should be implemented to load the dataset for training or evaluation.
        """
        pass

    @abstractmethod
    def fit(self):  #Fit model to data
        """
        Fit the model to the data.

        This method should be implemented to train the model using the loaded data.
        """
        pass

    @abstractmethod
    def generate(self): #Generate synthetic data
        """
        Generate synthetic data.

        This method should be implemented to produce synthetic data using the trained model.
        """
        pass


#For the Katabatic Metric SPI, the input must be data/a model and the output must be a result.
# Each Evaluation method must be applicable to tabular data.
class KatabaticMetricSPI(ABC):
    """
    Abstract base class for metrics in Katabatic.

    This class defines the Metric Service Provider Interface (SPI) which includes a method
    for evaluating synthetic data against real data.

    Methods:
        evaluate(real_data, synthetic_data): Evaluate the synthetic data against the real data.
    """
    @abstractmethod
    def evaluate(real_data, synthetic_data): # Evaluate the synthetic data against the real data
        """
        Evaluate the synthetic data against the real data.

        Args:
            real_data (Any): The real data for comparison.
            synthetic_data (Any): The synthetic data generated by the model.

        Returns:
            Any: The result of the evaluation.

        """
        print("Comparing real data to synthetic data.")

        
    